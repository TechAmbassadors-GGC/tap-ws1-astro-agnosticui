---
// Style Imports
import '../../styles/global.css';
import '@fontsource/source-sans-pro';
import '@fontsource/pixelify-sans';
import '@fontsource/ibm-plex-mono';
import '@fontsource/work-sans';
import '@fontsource/cormorant-garamond';
import '@fontsource/spectral';
import '@fontsource/crimson-pro';
import '@fontsource/alfa-slab-one';


// common.min.css is distributed with agnostic-react
// and agnostic-svelte too. But, since we're using all
// of these together, we only need to import global CSS
// once and in one place.
// common.min.css combines properties, resets, utilities
// import "agnostic-vue/dist/common.min.css";
// But!! Rob much prefers individual modular import ;)
import "agnostic-vue/dist/common.properties.min.css";
import "agnostic-vue/dist/common.resets.min.css";
import "agnostic-vue/dist/common.utilities.min.css";
import "agnostic-vue/dist/opinions.min.css";

// Component Imports
import "agnostic-vue/dist/index.css";
import { Image } from "astro:assets";
import TAPHeader from '../../components/TAPHeader.vue';
import TAPFooter from '../../components/TAPFooter.vue';


// Read from conten collection
import { getCollection } from 'astro:content';
import Crumbs from "../../components/Crumbs.vue"
// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const projects = await getCollection('projects');
  return projects.map(project => ({
    params: { "projectId": `${project.data.year}/${project.data.semester}/${project.data.id}` }, props: { project },
  }));
  // TODO: add to list: years and semesters as search results pages; potentially add techs/ and students/ folders here or in the base
}



// Goal 1: Make it redirect to the projects.astro page, using the parameters as values for 


// Goal 2: Actually  
// 2. For your template, you can get the entry directly from the prop
// const { slug } = Astro.params;
const { project } = Astro.props;
const { Content } = await project.render();

// BreadCrumb variables
const  projYear  = project.data.year;
const  projSemester  = project.data.semester;
const  projName  = project.data.title;

// Page title
let title = `${project.data.title} - Projects`;
import TAPDefaultLayout from "../../layouts/default.astro";
import { Debug } from 'astro:components';

// VideoAd
const visible = true; // Define visibility for videoAD
const showIframe = project.data.videoAd ? true : false; // Check if videoAd exists

// Github button
import { Button, ButtonGroup } from 'agnostic-vue';
import githubLogo from '/public/assets/github.svg';
import VideoAd from '../../components/astro/VideoAd.astro';
import Gallery from '../../components/astro/Gallery.astro';
import VideoCarousel from '../../components/vue/VideoCarousel.vue';


// Logos
let imageLogoLight = project.data.imageLogoLight?.src;
let imageLogoDark = project.data.imageLogoDark ? project.data.imageLogoDark.src : imageLogoLight;
imageLogoLight = imageLogoLight ? imageLogoLight : imageLogoDark; // in case only dark is provided
const imageLogoTrans = project.data.imageLogoTrans?.src;
imageLogoLight = imageLogoTrans ? imageLogoTrans : imageLogoLight;
imageLogoDark = imageLogoTrans ? imageLogoTrans : imageLogoDark;
---
<TAPDefaultLayout title={title}>
	<Crumbs pageType="project" pageUrl=`/projects/${projYear}/${projSemester}/${project.data.id}`/>
	<div class="body-prj">
    <h1 class="projectTitle">{project.data.shortTitle ? project.data.shortTitle : project.data.title }</h1>
	{ project.data.shortTitle && (
		<h3 class="projectSubtitle"> {project.data.title} </h3>
	)}
	<!-- <img src={project.data.imageTeam.src} alt="Project Image" class="projectImage"/> -->
	
	<!-- <img src={project.data.imageLogoTrans ? project.data.imageLogoTrans.src : project.data.imageLogoLight.src} alt="Transparent Logo" class="TransparentLogo"/> -->
	<img src= {imageLogoLight} alt="Project Image" class="TransparentLogo imageLight">
    <img src= {imageLogoDark} alt="Project Image" class="TransparentLogo imageDark">
	
	<div class="projectText">
		
		<!-- TODO: link to publications? or Github -->
		
		<h5><b> TEAM MEMBERS: </b>
		{project.data.students.map((student, index) => (
		<>
		<a href={`/students/${student}`}>{student}</a>
		{index < project.data.students.length - 1 ? ", " : ""}
		</>
		))}
		</h5>
		
		<h5><b> ADVISORS: </b>  
			{project.data.instructors.map((instructor, index) => (
				<>
				<a href={`/instructors/${instructor}`}>{instructor}</a>
				{index < project.data.instructors.length - 1 ? ", " : ""}
				</>
				))}
		
		</h5>
		
		<h5>
			<b>TECH:</b>
			{project.data.techs.map((tech, index) => (
			  <>
				<a href={`/techs/${tech}`}>{tech}</a>
				{index < project.data.techs.length - 1 ? ", " : ""}
			  </>
			))}
		  </h5>

		<h5><b> DIFFICULTY: </b> 
			{project.data.difficulty.map((diff, index) =>(
			<>
			<a href={`/difficulties/${diff}`}>{diff}</a>
			{index < project.data.difficulty.length - 1 ? ", " : ""}
			</>
			))} 
		</h5>
		
		<h5><b> TARGET AUDIENCE: </b>
			{project.data.levels.map((level, index) =>(
				<>
				<a href={`/levels/${level}`}>{level}</a>
				{index < project.data.levels.length - 1 ? ", " : ""}
				</>
			))} 
		</h5>
		
		<h5><b> DURATION: </b> {project.data.durationMins.join(" - ")} minutes</h5>

		<h5><b> CURATOR(S): </b> {project.data.curator?.join(", ")} </h5>

		<h5><b> PUBLISHED DATE:</b> {project.data.publishedDate.toDateString().slice(4)} </h5>
		<!-- TODO: change format of date -->

		<h5><b> CREATED IN SEMESTER:</b> {project.data.semester[0].toUpperCase()}{project.data.semester.slice(1)} {project.data.year} </h5>

		<h5>Read more on
			<a href={project.data.github} target="_blank">
			<Button mode="primary" isRounded>Github <Image src={githubLogo} alt="GitHub Octocat" class="octocat-logo"></Image></button>
			</a>
		</h5>

	</div>

	{ project.data?.videoAd && ( /* Video Ad */
		<VideoAd src={project.data.videoAd} showIframe={true}></VideoAd>
			)}
	

    <Content />
<div class="prj-setup-section">
	{project.data?.videos && project.data.videos.length > 0 && (
		// <h2>Project Setup & Installation:</h2>
		<VideoCarousel client:load videos={project.data.videos} showIframe={true}/>
		)

	}
	</div>

	{project.data?.images && (
		<h2>Gallery</h2>
		<Gallery photos={project.data.images} />
	  )}
</div>
	
<style>
	

	.octocat-logo{
	margin-left: 8px;
    width: 30px;
    height: 30px;
	}

	.projectImage {
		margin-right: 1em;
		width: clamp(25em, 50%, 45em);
		float: left;
		padding-bottom: 0.5em;
		padding-right: 0.5em;
	}

	.TransparentLogo{
		margin-right: 1em;
		width: clamp(15em, 50%, 25em);
		float: left;
		padding-bottom: 0.5em;
		padding-right: 0.5em;
	}

	.projectText {
		font-size: 1.25em; 
		text-align: left;
		/* width: clamp(15em, 45%, 45em); */
		vertical-align: bottom; 			
		display: inline;
		margin-bottom: 1em; /* doesn't work when display: inline */
	}

	.projectText h5 {
		margin-bottom: 0.5em;
	}

	h1.projectTitle {
		text-align: center;
	}

	h2.projectSubtitle {
		margin-top: 0em;
		margin-bottom: 1em; 
		/* margin: 0em auto 1em; */
		text-align: center;
	}

	.body-prj h2 {
		margin-top: 2em;
	}
	
	h5{
		margin: 1.5rem, auto;
		gap: 1rem;
	}

	.prj-setup-section{
    	justify-content: center;
		align-items: center;
    	height: fit-content;
		position: relative;
		margin: 0 auto;
  }

  
</style>
</TAPDefaultLayout>

